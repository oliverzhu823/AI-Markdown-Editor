// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  avatar        String?
  anonymous     Boolean   @default(false)
  createdAt     DateTime  @default(now())

  Post      Post[]
  projects  ProjectUsers[]
  SentEmail SentEmail[]

  File File[]
  Tag  Tag[]

  // auth
  key          Key[]
  auth_session Session[]
}

model Session {
  id             String @id @unique
  user_id        String
  active_expires BigInt
  idle_expires   BigInt
  user           User   @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
}

model Key {
  id              String  @id @unique
  hashed_password String?
  user_id         String
  user            User    @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
}

model Project {
  id   String  @id @default(cuid())
  name String
  slug String  @unique
  logo String?

  users ProjectUsers[]

  plan        ProjectPlanItem @default(Free)
  planComment String?

  sizeLimit   Int @default(1048576)
  aiChatLimit Int @default(20)

  stripeId          String? @unique // Stripe subscription ID
  billingCycleStart Int? // day of the month when the billing cycle starts

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  File        File[]
  ProjectPlan ProjectPlan[]
  Post        Post[]
  tags        Tag[]
  SentEmail   SentEmail[]
}

enum ProjectPlanItem {
  Custom
  Free
  Pro
}

model ProjectUsers {
  id        String          @id @default(cuid())
  role      ProjectUserRole @default(member)
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  user      User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  project   Project         @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String

  @@unique([userId, projectId])
  @@index([projectId])
}

model ProjectPlan {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  payMethod   ProjectPlanPayMethod @default(CDkey)
  period      ProjectPlanPeriod    @default(monthly)
  periodCount Int                  @default(1)

  cdkey String? @unique

  project   Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String?

  @@index([id, cdkey])
}

enum ProjectPlanPeriod {
  monthly
  yearly
}

enum ProjectPlanPayMethod {
  Weixin
  Alipay
  CDkey
}

enum ProjectUserRole {
  admin
  member
}

model Post {
  id          String          @id @default(cuid())
  slug        String?         @unique
  title       String?
  html        String?         @db.LongText
  markdown    String          @db.LongText
  image       String?
  publicStats PostPublicStats @default(public)

  // User who created the post
  user   User?   @relation(fields: [userId], references: [id])
  userId String?

  // Project that the post belongs to
  project   Project? @relation(fields: [projectId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  projectId String?

  clicks Int @default(0) // number of clicks

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([projectId, id, slug])
}

enum PostPublicStats {
  public
  private
}

model Tag {
  id        String   @id @default(cuid())
  name      String
  color     String   @default("blue")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // User who created the tag
  user   User?   @relation(fields: [userId], references: [id])
  userId String?

  // Project that the tag belongs to
  project   Project? @relation(fields: [projectId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  projectId String?

  @@unique([name, projectId])
  @@index(projectId)
}

enum EmailType {
  firstDomainInvalidEmail
  secondDomainInvalidEmail
  firstUsageLimitEmail
  secondUsageLimitEmail
}

model SentEmail {
  id        String    @id @default(cuid())
  type      EmailType
  createdAt DateTime  @default(now())

  project   Project? @relation(fields: [projectId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  projectId String?

  User   User?   @relation(fields: [userId], references: [id])
  userId String?

  @@index([projectId])
}

enum FileUploader {
  cloudflareR2
}

model File {
  id       String @id @default(cuid())
  filename String
  url      String
  size     Float

  user   User?   @relation(fields: [userId], references: [id])
  userId String?

  project   Project? @relation(fields: [projectId], references: [id])
  projectId String?

  uploader FileUploader @default(cloudflareR2)
}
